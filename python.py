# app_phan_tich_kinh_doanh.py (ƒê√£ ch·ªânh s·ª≠a)

import streamlit as st
import pandas as pd
import numpy as np
import io
import re
from google import genai
from google.genai.errors import APIError
from docx import Document 

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh üìà")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu, t√≠nh to√°n d√≤ng ti·ªÅn v√† ƒë√°nh gi√° hi·ªáu qu·∫£ d·ª± √°n ƒë·∫ßu t∆∞ t·ª´ file Word.")

# ------------------------------------------------------------------------------
# KH·∫ÆC PH·ª§C L·ªñI: Th√™m ch·ª©c nƒÉng nh·∫≠p API Key qua Sidebar n·∫øu kh√¥ng t√¨m th·∫•y
# ------------------------------------------------------------------------------
def get_gemini_client():
    """T·∫°o v√† tr·∫£ v·ªÅ client Gemini, ∆∞u ti√™n t·ª´ Secrets, sau ƒë√≥ l√† Sidebar."""
    
    # 1. ∆Øu ti√™n l·∫•y t·ª´ Streamlit Secrets
    api_key = st.secrets.get("GEMINI_API_KEY")
    
    # 2. N·∫øu kh√¥ng c√≥ trong Secrets, t·∫°o √¥ nh·∫≠p li·ªáu trong Sidebar
    if not api_key:
        with st.sidebar:
            st.subheader("C·∫•u h√¨nh API Key")
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong Streamlit Secrets.")
            api_key = st.text_input(
                "Nh·∫≠p Kh√≥a API Gemini c·ªßa b·∫°n:", 
                type="password",
                help="B·∫°n c√≥ th·ªÉ l·∫•y kh√≥a n√†y t·ª´ Google AI Studio."
            )
            st.caption("Kh√≥a API s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.")
    
    if api_key:
        try:
            return genai.Client(api_key=api_key)
        except Exception as e:
            # L·ªói x·∫£y ra khi kh√≥a API c√≥ ƒë·ªãnh d·∫°ng sai
            st.error(f"L·ªói kh·ªüi t·∫°o Gemini Client: Kh√≥a API kh√¥ng h·ª£p l·ªá. Chi ti·∫øt: {e}")
            return None
    else:
        # Hi·ªÉn th·ªã l·ªói ch√≠nh tr√™n main page
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ho·∫∑c nh·∫≠p v√†o Sidebar.")
        return None

# --- H√†m tr√≠ch xu·∫•t v√† c√°c h√†m t√≠nh to√°n kh√°c (Gi·ªØ nguy√™n) ---

@st.cache_data(show_spinner=False)
def extract_data_from_word_ai(docx_content, client):
    # ... (gi·ªØ nguy√™n code h√†m n√†y)
    document = Document(io.BytesIO(docx_content))
    full_text = [para.text for para in document.paragraphs]
    document_text = "\n".join(full_text)
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh. H√£y ƒë·ªçc n·ªôi dung t√†i li·ªáu ph∆∞∆°ng √°n kinh doanh sau v√† tr√≠ch xu·∫•t **ch√≠nh x√°c** c√°c th√¥ng s·ªë sau ƒë√¢y. 
    L∆∞u √Ω: **V·ªën ƒë·∫ßu t∆∞** l√† t·ªïng v·ªën ban ƒë·∫ßu (nƒÉm 0). **D√≤ng ƒë·ªùi d·ª± √°n** t√≠nh b·∫±ng nƒÉm (integer). **Doanh thu** v√† **Chi ph√≠** c√≥ th·ªÉ l√† m·ªôt chu·ªói gi√° tr·ªã (v√≠ d·ª•: '[1000, 1100, 1200, ...]') t∆∞∆°ng ·ª©ng v·ªõi c√°c nƒÉm c·ªßa d·ª± √°n. **WACC** v√† **Thu·∫ø** l√† t·ª∑ l·ªá (v√≠ d·ª•: 10% -> 0.1). 
    N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o, h√£y ƒë·ªÉ gi√° tr·ªã ƒë√≥ l√† 'N/A'.
    
    Tr·∫£ l·ªùi **DUY NH·∫§T** b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ c·∫•u tr√∫c nh∆∞ sau:
    {{
        "V·ªën ƒë·∫ßu t∆∞ (VND)": "...",
        "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)": "...",
        "Doanh thu (VND/nƒÉm)": "[value_year1, value_year2, ...]",
        "Chi ph√≠ (VND/nƒÉm)": "[value_year1, value_year2, ...]",
        "WACC": "...",
        "Thu·∫ø su·∫•t": "..."
    }}
    
    N·ªôi dung t√†i li·ªáu:
    ---
    {document_text[:10000]} 
    ---
    """
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config={"response_mime_type": "application/json"}
        )
        return response.text
    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: {e}")
        return None
    except Exception as e:
        st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None

@st.cache_data
def calculate_project_metrics(initial_investment, cash_flows, wacc, project_life):
    # ... (gi·ªØ nguy√™n code h√†m n√†y)
    npv_cash_flows = np.insert(cash_flows, 0, -initial_investment)
    npv_value = np.npv(wacc, npv_cash_flows)
    irr_value = np.irr(npv_cash_flows)
    
    cumulative_cf = np.cumsum(cash_flows)
    pp_value = project_life 
    for i in range(len(cumulative_cf)):
        if cumulative_cf[i] >= initial_investment:
            if i == 0:
                pp_value = initial_investment / cash_flows[0]
            else:
                remaining_investment = initial_investment - cumulative_cf[i-1]
                pp_value = i + (remaining_investment / cash_flows[i])
            break
            
    discounted_cf = cash_flows / [(1 + wacc)**t for t in range(1, project_life + 1)]
    cumulative_discounted_cf = np.cumsum(discounted_cf)
    dpp_value = project_life
    for i in range(len(cumulative_discounted_cf)):
        if cumulative_discounted_cf[i] >= initial_investment:
            if i == 0:
                dpp_value = initial_investment / discounted_cf[0]
            else:
                remaining_investment = initial_investment - cumulative_discounted_cf[i-1]
                dpp_value = i + (remaining_investment / discounted_cf[i])
            break

    return {
        "NPV": npv_value,
        "IRR": irr_value,
        "PP": pp_value,
        "DPP": dpp_value
    }

def get_ai_analysis_project(metrics_data, cash_flow_df, client):
    # ... (gi·ªØ nguy√™n code h√†m n√†y)
    metrics_str = pd.Series(metrics_data).to_string()
    cash_flow_str = cash_flow_df.to_markdown(index=False)
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ƒë·∫ßu t∆∞ v√† t√†i ch√≠nh d·ª± √°n chuy√™n nghi·ªáp. D·ª±a tr√™n B·∫£ng d√≤ng ti·ªÅn v√† c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° chuy√™n s√¢u v√† kh√°ch quan (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi v√† m·ª©c ƒë·ªô h·∫•p d·∫´n c·ªßa d·ª± √°n.
    
    1. **ƒê√°nh gi√° chung:** D·ª± √°n c√≥ ƒë√°ng ƒë·∫ßu t∆∞ kh√¥ng? (D·ª±a tr√™n NPV v√† IRR so v·ªõi WACC).
    2. **ƒê√°nh gi√° r·ªßi ro:** Ph√¢n t√≠ch th·ªùi gian ho√†n v·ªën (PP v√† DPP).
    3. **Khuy·∫øn ngh·ªã:** ƒê∆∞a ra k·∫øt lu·∫≠n v√† khuy·∫øn ngh·ªã (Ch·∫•p nh·∫≠n/T·ª´ ch·ªëi ho·∫∑c c·∫ßn xem x√©t th√™m).
    
    **Ch·ªâ s·ªë D·ª± √°n:**
    {metrics_str}
    
    **B·∫£ng D√≤ng ti·ªÅn Thu·∫ßn (Cash Flow):**
    {cash_flow_str}
    """
    
    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# ==============================================================================
#                               LOGIC CH√çNH C·ª¶A APP
# ==============================================================================

client = get_gemini_client()
if client is None:
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ API Key ho·∫∑c API Key kh√¥ng h·ª£p l·ªá

# --- Ch·ª©c nƒÉng 1: T·∫£i File & L·ªçc d·ªØ li·ªáu ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh",
    type=['docx']
)

# Kh·ªüi t·∫°o state ƒë·ªÉ l∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc
if 'extracted_data' not in st.session_state:
    st.session_state['extracted_data'] = None

if uploaded_file is not None:
    st.success(f"ƒê√£ t·∫£i file: {uploaded_file.name}")
    
    if st.button("üöÄ L·ªçc Th√¥ng tin D·ª± √°n b·∫±ng AI"):
        with st.spinner('AI ƒëang ƒë·ªçc v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file Word...'):
            docx_content = uploaded_file.getvalue()
            # ƒê·∫£m b·∫£o client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi g·ªçi h√†m
            if client: 
                json_data = extract_data_from_word_ai(docx_content, client)
                
                if json_data:
                    try:
                        import json
                        extracted_dict = json.loads(json_data)
                        st.session_state['extracted_data'] = extracted_dict
                        st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
                    except json.JSONDecodeError:
                        st.error("AI kh√¥ng tr·∫£ l·ªùi ·ªü ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒëi·ªÅu ch·ªânh file.")
                        st.session_state['extracted_data'] = None
                else:
                    st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra API Key ho·∫∑c n·ªôi dung file.")

if st.session_state['extracted_data']:
    data = st.session_state['extracted_data']
    st.subheader("1.a. K·∫øt qu·∫£ Tr√≠ch xu·∫•t D·ªØ li·ªáu c·ªßa AI")
    st.json(data)
    
    # --- Chu·∫©n b·ªã d·ªØ li·ªáu cho t√≠nh to√°n ---
    try:
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng s·ªë h·ªçc
        VON_DAU_TU = float(re.sub(r'[^\d.]', '', str(data['V·ªën ƒë·∫ßu t∆∞ (VND)']).split('[')[0]))
        DONG_DOI = int(data['D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)'])
        WACC = float(data['WACC'])
        THUE = float(data['Thu·∫ø su·∫•t'])
        
        doanh_thu_str = data['Doanh thu (VND/nƒÉm)'].strip()
        chi_phi_str = data['Chi ph√≠ (VND/nƒÉm)'].strip()
        
        def parse_array(array_str):
            return [float(n) for n in re.findall(r"[-+]?\d*\.\d+|\d+", array_str)]

        DOANH_THU = parse_array(doanh_thu_str)
        CHI_PHI = parse_array(chi_phi_str)
        
        if len(DOANH_THU) != DONG_DOI or len(CHI_PHI) != DONG_DOI:
             st.warning(f"L·ªói d·ªØ li·ªáu: S·ªë l∆∞·ª£ng nƒÉm trong Doanh thu ({len(DOANH_THU)}) ho·∫∑c Chi ph√≠ ({len(CHI_PHI)}) kh√¥ng kh·ªõp v·ªõi D√≤ng ƒë·ªùi d·ª± √°n ({DONG_DOI} nƒÉm). Vui l√≤ng ki·ªÉm tra l·∫°i file Word.")
             valid_data = False
        else:
             valid_data = True

    except Exception as e:
        st.error(f"L·ªói chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu tr√≠ch xu·∫•t sang d·∫°ng s·ªë: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng d·ªØ li·ªáu AI tr·∫£ v·ªÅ.")
        valid_data = False

    
    if valid_data:
        # --- Ch·ª©c nƒÉng 2: X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn ---
        st.markdown("---")
        st.subheader("2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn (Cash Flow Statement) üí∞")

        years = list(range(1, DONG_DOI + 1))
        
        EBT = np.array(DOANH_THU) - np.array(CHI_PHI)
        THUE_PHAI_NOP = np.where(EBT > 0, EBT * THUE, 0)
        CASH_FLOWS = EBT - THUE_PHAI_NOP
        
        cf_data = {
            "NƒÉm": [0] + years,
            "Doanh thu (VND)": [0] + DOANH_THU,
            "Chi ph√≠ (VND)": [0] + CHI_PHI,
            "L·ª£i nhu·∫≠n tr∆∞·ªõc Thu·∫ø (EBT)": [0] + list(EBT),
            "Thu·∫ø (VND)": [0] + list(THUE_PHAI_NOP),
            "D√≤ng ti·ªÅn thu·∫ßn (VND)": [-VON_DAU_TU] + list(CASH_FLOWS)
        }
        
        df_cash_flow = pd.DataFrame(cf_data).set_index("NƒÉm")
        
        st.dataframe(df_cash_flow.style.format('{:,.0f}'), use_container_width=True)
        
        # --- Ch·ª©c nƒÉng 3: T√≠nh to√°n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ ---
        st.markdown("---")
        st.subheader("3. T√≠nh to√°n C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n üî¢")
        
        project_metrics = calculate_project_metrics(
            initial_investment=VON_DAU_TU,
            cash_flows=CASH_FLOWS,
            wacc=WACC,
            project_life=DONG_DOI
        )
        
        col_npv, col_irr, col_pp, col_dpp = st.columns(4)
        
        with col_npv:
            st.metric(
                label="Gi√° tr·ªã Hi·ªán t·∫°i R√≤ng (NPV)", 
                value=f"{project_metrics['NPV']:,.0f} VND",
                delta="D·ª± √°n KH·∫¢ THI" if project_metrics['NPV'] > 0 else "D·ª± √°n KH√îNG KH·∫¢ THI"
            )
        with col_irr:
            st.metric(
                label="T·ª∑ su·∫•t Ho√†n v·ªën N·ªôi b·ªô (IRR)", 
                value=f"{project_metrics['IRR']*100:.2f} %",
                delta=f"WACC: {WACC*100:.2f} %"
            )
        with col_pp:
            st.metric(
                label="Th·ªùi gian Ho√†n v·ªën (PP)", 
                value=f"{project_metrics['PP']:.2f} nƒÉm"
            )
        with col_dpp:
            st.metric(
                label="Th·ªùi gian Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u (DPP)", 
                value=f"{project_metrics['DPP']:.2f} nƒÉm"
            )

        # --- Ch·ª©c nƒÉng 4: Y√™u c·∫ßu AI Ph√¢n t√≠ch ---
        st.markdown("---")
        st.subheader("4. Ph√¢n t√≠ch Chuy√™n s√¢u Ch·ªâ s·ªë Hi·ªáu qu·∫£ (AI) üß†")
        
        if st.button("üìù Y√™u c·∫ßu AI Ph√¢n t√≠ch Chuy√™n s√¢u"):
            with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                # ƒê·∫£m b·∫£o client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi g·ªçi h√†m
                if client:
                    ai_result = get_ai_analysis_project(
                        metrics_data=project_metrics,
                        cash_flow_df=df_cash_flow.reset_index(),
                        client=client
                    )
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                    st.info(ai_result)
                else:
                    st.error("Kh√¥ng th·ªÉ ph√¢n t√≠ch. Vui l√≤ng cung c·∫•p Kh√≥a API Gemini h·ª£p l·ªá.")

st.markdown("---")
st.info("üí° L∆∞u √Ω: C·∫ßn ƒë·∫£m b·∫£o file Word cung c·∫•p th√¥ng tin r√µ r√†ng v√† nh·∫•t qu√°n ƒë·ªÉ AI tr√≠ch xu·∫•t d·ªØ li·ªáu ch√≠nh x√°c.")
