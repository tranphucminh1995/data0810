# business_plan_analyzer.py

import streamlit as st
import pandas as pd
import numpy_financial as npf
from docx import Document
from google import genai
from google.genai.errors import APIError
import json
import re

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh üöÄ",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh (PV & D√≤ng Ti·ªÅn) üí∞")
st.markdown("T·∫£i l√™n file Word ch·ª©a ph∆∞∆°ng √°n kinh doanh, AI s·∫Ω tr√≠ch xu·∫•t c√°c ch·ªâ s·ªë v√† t√≠nh to√°n hi·ªáu qu·∫£ d·ª± √°n.")

# --- C·∫•u h√¨nh v√† H·∫±ng s·ªë ---
FINANCIAL_METRICS = [
    "V·ªën ƒë·∫ßu t∆∞ (Initial Investment)",
    "D√≤ng ƒë·ªùi d·ª± √°n (Project Life)",
    "Doanh thu (Revenue)",
    "Chi ph√≠ (Cost)",
    "WACC (Weighted Average Cost of Capital)",
    "Thu·∫ø (Tax Rate)"
]

# --- H√†m g·ªçi AI ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin (Nhi·ªám v·ª• 1) ---
def extract_financial_data_from_docx(docx_content, api_key):
    """
    S·ª≠ d·ª•ng Gemini API ƒë·ªÉ tr√≠ch xu·∫•t c√°c ch·ªâ s·ªë t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n.
    """
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        metric_list = "\n".join([f"- {m}" for m in FINANCIAL_METRICS])
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh v√† ph√¢n t√≠ch d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc n·ªôi dung b√°o c√°o kinh doanh b√™n d∆∞·ªõi v√† tr√≠ch xu·∫•t 
        ch√≠nh x√°c c√°c ch·ªâ s·ªë sau:
        {metric_list}

        L∆ØU √ù QUAN TR·ªåNG:
        1. V·ªën ƒë·∫ßu t∆∞, Doanh thu, Chi ph√≠ ph·∫£i l√† m·ªôt **gi√° tr·ªã s·ªë** (tri·ªáu, t·ª∑, ho·∫∑c ƒë∆°n v·ªã ti·ªÅn t·ªá). N·∫øu ch·ªâ ƒë·ªÅ c·∫≠p ƒë·∫øn nƒÉm ƒë·∫ßu, h√£y l·∫•y gi√° tr·ªã ƒë√≥.
        2. D√≤ng ƒë·ªùi d·ª± √°n, Thu·∫ø, WACC ph·∫£i l√† m·ªôt **gi√° tr·ªã s·ªë**. D√≤ng ƒë·ªùi d·ª± √°n l√† s·ªë nƒÉm. Thu·∫ø v√† WACC l√† t·ª∑ l·ªá ph·∫ßn trƒÉm (v√≠ d·ª•: 10% tr√≠ch th√†nh 0.10).
        3. D√≤ng ƒë·ªùi d·ª± √°n (Project Life) l√† s·ªë nƒÉm d·ª± √°n ho·∫°t ƒë·ªông. N·∫øu kh√¥ng t√¨m th·∫•y, ƒë·∫∑t l√† 5 nƒÉm.
        4. Doanh thu (Revenue) v√† Chi ph√≠ (Cost) n·∫øu kh√¥ng ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p r√µ theo nƒÉm, h√£y gi·∫£ ƒë·ªãnh ch√∫ng l√† gi√° tr·ªã **·ªïn ƒë·ªãnh h√†ng nƒÉm** (Annual) cho c√°c nƒÉm ti·∫øp theo.
        5. ƒê∆∞a ra K·∫æT QU·∫¢ CU·ªêI C√ôNG d∆∞·ªõi d·∫°ng m·ªôt **JSON object** (ch·ªâ c√≥ JSON, kh√¥ng c√≥ th√™m l·ªùi gi·∫£i th√≠ch hay vƒÉn b·∫£n n√†o kh√°c) v·ªõi c·∫•u tr√∫c:
        {{
            "V·ªën ƒë·∫ßu t∆∞": [Gi√° tr·ªã s·ªë],
            "D√≤ng ƒë·ªùi d·ª± √°n": [S·ªë nƒÉm],
            "Doanh thu": [Gi√° tr·ªã s·ªë h√†ng nƒÉm],
            "Chi ph√≠": [Gi√° tr·ªã s·ªë h√†ng nƒÉm],
            "WACC": [T·ª∑ l·ªá chi·∫øt kh·∫•u d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.12],
            "Thu·∫ø": [T·ª∑ l·ªá thu·∫ø d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.20]
        }}

        N·ªôi dung Ph∆∞∆°ng √°n Kinh doanh:
        ---
        {docx_content}
        ---
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        
        # Tr√≠ch xu·∫•t chu·ªói JSON t·ª´ ph·∫£n h·ªìi c·ªßa AI
        json_string = response.text.strip()
        if json_string.startswith("```json"):
            json_string = json_string[7:]
        if json_string.endswith("```"):
            json_string = json_string[:-3]
        
        data = json.loads(json_string)
        return data

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói ph√¢n t√≠ch c√∫ ph√°p JSON t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒëi·ªÅu ch·ªânh prompt.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t AI: {e}")
        return None

# --- H√†m x√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn (Nhi·ªám v·ª• 2) ---
def create_cash_flow_table(data):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn d·ª± √°n t·ª´ d·ªØ li·ªáu ƒë√£ l·ªçc."""
    try:
        # L·∫•y c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh s·ªë (numeric)
        I = float(data.get("V·ªën ƒë·∫ßu t∆∞", 0))
        N = int(data.get("D√≤ng ƒë·ªùi d·ª± √°n", 5)) # Gi·∫£ ƒë·ªãnh 5 nƒÉm n·∫øu kh√¥ng tr√≠ch ƒë∆∞·ª£c
        R = float(data.get("Doanh thu", 0))
        C = float(data.get("Chi ph√≠", 0))
        T = float(data.get("Thu·∫ø", 0.20))      # Gi·∫£ ƒë·ªãnh 20% n·∫øu kh√¥ng tr√≠ch ƒë∆∞·ª£c

        # T·∫°o chu·ªói nƒÉm cho b·∫£ng d√≤ng ti·ªÅn
        years = list(range(0, N + 1))
        
        # 1. L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø v√† l√£i (EBIT)
        EBIT = [0] + [R - C] * N
        
        # 2. Thu·∫ø TNDN (Tax)
        # S·ª≠ d·ª•ng max(0, ...) ƒë·ªÉ tr√°nh thu·∫ø √¢m (l·ªó)
        Tax = [0] + [max(0, ebit * T) for ebit in EBIT[1:]]
        
        # 3. L·ª£i nhu·∫≠n sau thu·∫ø (EAT)
        EAT = [0] + [EBIT[i] - Tax[i] for i in range(1, N + 1)]
        
        # 4. D√≤ng ti·ªÅn thu·∫ßn h√†ng nƒÉm (Annual Net Cash Flow - ANCF)
        # Gi·∫£ ƒë·ªãnh ƒë∆°n gi·∫£n ANCF = EAT
        ANCF = [0] + EAT[1:] 

        # 5. D√≤ng ti·ªÅn r√≤ng (Net CF)
        CashFlows = [-I] + ANCF[1:]
        
        # T·∫°o DataFrame
        df_cf = pd.DataFrame({
            "NƒÉm": years,
            "Doanh thu (R)": [0] + [R] * N,
            "Chi ph√≠ (C)": [0] + [C] * N,
            "L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBIT)": EBIT,
            "Thu·∫ø (Tax)": Tax,
            "L·ª£i nhu·∫≠n sau thu·∫ø (EAT)": EAT,
            "D√≤ng ti·ªÅn thu·∫ßn (ANCF)": ANCF,
            "V·ªën ƒë·∫ßu t∆∞ (I)": [-I if year == 0 else 0 for year in years],
            "D√≤ng ti·ªÅn r√≤ng (Net CF)": CashFlows
        })
        
        return df_cf, CashFlows

    except Exception as e:
        # Kh·ªëi except ƒë·ªÉ x·ª≠ l√Ω l·ªói v√† ngƒÉn SyntaxError
        st.error(f"L·ªói khi x√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn: {e}. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu tr√≠ch xu·∫•t t·ª´ AI.")
        return None, None

# --- H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë (Nhi·ªám v·ª• 3) ---
def calculate_project_metrics(cash_flows, wacc):
    """T√≠nh to√°n NPV, IRR, PP, v√† DPP."""
    
    # 1. Net Present Value (NPV)
    npv = npf.npv(wacc, cash_flows)
    
    # 2. Internal Rate of Return (IRR)
    try:
        irr = npf.irr(cash_flows)
    except:
        irr = None 

    # 3. Payback Period (PP) v√† DPP (Discounted Payback Period)
    pp, dpp = None, None
    initial_investment = abs(cash_flows[0])
    
    discounted_cash_flows = [cf / (1 + wacc)**t for t, cf in enumerate(cash_flows)]
    cumulative_cf = 0
    cumulative_dcf = 0

    for t in range(1, len(cash_flows)):
        cumulative_cf += cash_flows[t]
        cumulative_dcf += discounted_cash_flows[t]
        
        # T√≠nh PP
        if pp is None and cash_flows[t] > 0 and cumulative_cf >= initial_investment:
            prev_cf = cumulative_cf - cash_flows[t]
            pp = (t - 1) + (initial_investment - prev_cf) / cash_flows[t] 

        # T√≠nh DPP
        if dpp is None and discounted_cash_flows[t] > 0 and cumulative_dcf >= initial_investment:
            prev_dcf = cumulative_dcf - discounted_cash_flows[t]
            dpp = (t - 1) + (initial_investment - prev_dcf) / discounted_cash_flows[t]
            
        if pp is not None and dpp is not None:
            break
            
    # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
    pp_str = f"{pp:.2f} nƒÉm" if pp is not None and pp > 0 else "Kh√¥ng ho√†n v·ªën"
    dpp_str = f"{dpp:.2f} nƒÉm" if dpp is not None and dpp > 0 else "Kh√¥ng ho√†n v·ªën (DCF)"
    
    return {
        "NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)": npv,
        "IRR (T·ª∑ su·∫•t sinh l·ª£i n·ªôi b·ªô)": irr,
        "PP (Th·ªùi gian ho√†n v·ªën)": pp_str,
        "DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)": dpp_str
    }

# --- H√†m g·ªçi AI ph√¢n t√≠ch (Nhi·ªám v·ª• 4) ---
def get_ai_evaluation(metrics_data, wacc, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√£ t√≠nh to√°n ƒë·∫øn Gemini API v√† nh·∫≠n nh·∫≠n x√©t ƒë√°nh gi√°."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'

        metrics_display = "\n".join([f"- {k}: {v}" for k, v in metrics_data.items()])
        
        prompt = f"""
        B·∫°n l√† m·ªôt Chuy√™n gia Th·∫©m ƒë·ªãnh D·ª± √°n ƒë·∫ßu t∆∞ chuy√™n nghi·ªáp. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau v√† T·ª∑ su·∫•t chi·∫øt kh·∫•u (WACC), 
        h√£y ƒë∆∞a ra nh·∫≠n x√©t, k·∫øt lu·∫≠n (kho·∫£ng 3-5 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi v√† hi·ªáu qu·∫£ t√†i ch√≠nh c·ªßa d·ª± √°n. 

        Ti√™u ch√≠ ƒë√°nh gi√°:
        1. NPV: C·∫ßn ph·∫£i > 0.
        2. IRR: C·∫ßn ph·∫£i > WACC.
        3. PP/DPP: C·∫ßn ph·∫£i nh·ªè h∆°n D√≤ng ƒë·ªùi d·ª± √°n.

        D·ªØ li·ªáu v√† Ch·ªâ s·ªë:
        - T·ª∑ su·∫•t Chi·∫øt kh·∫•u (WACC): {wacc:.2%}
        - {metrics_display}

        Nh·∫≠n x√©t v√† K·∫øt lu·∫≠n (B·∫±ng ti·∫øng Vi·ªát):
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# =========================================================================
# --- Logic ·ª®ng d·ª•ng Streamlit ---
# =========================================================================

# 1. T·∫£i file Word
uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh:",
    type=['docx']
)

if uploaded_file is not None:
    document = Document(uploaded_file)
    docx_content = "\n".join([para.text for para in document.paragraphs])
        
    st.info("File ƒë√£ t·∫£i l√™n th√†nh c√¥ng. Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu.")

    if st.button("Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh (AI) ü§ñ"):
        api_key = st.secrets.get("GEMINI_API_KEY")
        
        if not api_key:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")
        else:
            with st.spinner('ƒêang g·ª≠i n·ªôi dung file Word ƒë·∫øn Gemini ƒë·ªÉ tr√≠ch xu·∫•t...'):
                financial_data = extract_financial_data_from_docx(docx_content, api_key)

            if financial_data:
                st.session_state['financial_data'] = financial_data
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
                
                # --- Nhi·ªám v·ª• 1: Hi·ªÉn th·ªã D·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t ---
                st.subheader("1. D·ªØ li·ªáu T√†i ch√≠nh ƒë√£ Tr√≠ch xu·∫•t")
                extracted_df = pd.DataFrame(financial_data.items(), columns=["Ch·ªâ ti√™u", "Gi√° tr·ªã"])
                
                extracted_df['Gi√° tr·ªã hi·ªÉn th·ªã'] = extracted_df.apply(
                    lambda row: f"{row['Gi√° tr·ªã']:,}" if row['Ch·ªâ ti√™u'] not in ["WACC", "Thu·∫ø", "D√≤ng ƒë·ªùi d·ª± √°n"] 
                                else (f"{row['Gi√° tr·ªã']:.2%}" if row['Ch·ªâ ti√™u'] in ["WACC", "Thu·∫ø"] else row['Gi√° tr·ªã']), 
                    axis=1
                )
                st.dataframe(extracted_df[['Ch·ªâ ti√™u', 'Gi√° tr·ªã hi·ªÉn th·ªã']], use_container_width=True, hide_index=True)
                
                # X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn
                df_cf, cash_flows = create_cash_flow_table(financial_data)
                
                if df_cf is not None and cash_flows is not None:
                    st.session_state['df_cf'] = df_cf
                    st.session_state['cash_flows'] = cash_flows
                    
                    # --- Nhi·ªám v·ª• 2: Hi·ªÉn th·ªã B·∫£ng D√≤ng Ti·ªÅn ---
                    st.divider()
                    st.subheader("2. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n (Net Cash Flow)")
                    st.dataframe(df_cf.style.format({
                        col: '{:,.0f}' for col in df_cf.columns if col not in ['NƒÉm']
                    }), use_container_width=True, hide_index=True)
                    
                    # --- Nhi·ªám v·ª• 3: T√≠nh to√°n v√† Hi·ªÉn th·ªã Ch·ªâ s·ªë ƒê√°nh gi√° ---
                    wacc = financial_data.get("WACC", 0.12)
                    project_metrics = calculate_project_metrics(cash_flows, wacc)
                    st.session_state['project_metrics'] = project_metrics
                    
                    st.divider()
                    st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        npv_value = project_metrics["NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)"]
                        st.metric(
                            label="Gi√° tr·ªã hi·ªán t·∫°i r√≤ng (NPV)",
                            value=f"{npv_value:,.0f}",
                            delta="D·ª± √°n KH·∫¢ THI" if npv_value > 0 else "D·ª± √°n KH√îNG KH·∫¢ THI",
                            delta_color="normal" if npv_value > 0 else "inverse"
                        )
                    with col2:
                        irr_value = project_metrics["IRR (T·ª∑ su·∫•t sinh l·ª£i n·ªôi b·ªô)"]
                        if irr_value is not None:
                             st.metric(
                                label=f"T·ª∑ su·∫•t sinh l·ª£i n·ªôi b·ªô (IRR) (WACC: {wacc:.2%})",
                                value=f"{irr_value:.2%}",
                                delta="IRR > WACC" if irr_value > wacc else "IRR < WACC",
                                delta_color="normal" if irr_value > wacc else "inverse"
                            )
                        else:
                             st.metric(label=f"T·ª∑ su·∫•t sinh l·ª£i n·ªôi b·ªô (IRR) (WACC: {wacc:.2%})", value="N/A")
                        
                    with col3:
                        st.metric(
                            label="Th·ªùi gian ho√†n v·ªën (PP)",
                            value=project_metrics["PP (Th·ªùi gian ho√†n v·ªën)"]
                        )
                    with col4:
                        st.metric(
                            label="Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP)",
                            value=project_metrics["DPP (Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)"]
                        )

# --- Nhi·ªám v·ª• 4: Ph√¢n t√≠ch AI (Ch·∫°y sau khi ƒë√£ t√≠nh to√°n) ---
if 'project_metrics' in st.session_state and 'financial_data' in st.session_state:
    st.divider()
    st.subheader("4. Nh·∫≠n x√©t ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n (AI)")

    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†"):
        api_key = st.secrets.get("GEMINI_API_KEY")
        wacc = st.session_state['financial_data'].get("WACC", 0.12)

        if api_key:
            with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                ai_result = get_ai_evaluation(st.session_state['project_metrics'], wacc, api_key)
                st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                st.info(ai_result)
        else:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

elif uploaded_file is None:
    st.markdown("---")
    st.warning("Vui l√≤ng t·∫£i l√™n file Word v√† th·ª±c hi·ªán b∆∞·ªõc **Tr√≠ch xu·∫•t D·ªØ li·ªáu T√†i ch√≠nh (AI)** ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
